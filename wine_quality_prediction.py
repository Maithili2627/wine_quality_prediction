# -*- coding: utf-8 -*-
"""Wine Quality Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wSAzpxSjhLuHeqsc6PjNFpGEDekqCNOk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble._forest import RandomForestClassifier
from sklearn.metrics import accuracy_score

#load the dataset
df=pd.read_csv("https://raw.githubusercontent.com/dhrupad17/CodeClause_Wine_Quality_Prediction/main/winequality-red.csv")

df.shape

df.head()

# checking for missing values

df.isnull().sum()

# statistical measures of the dataset
df.describe()

# number of values for each quality
sns.catplot(x='quality',data=df,kind='count')

# volatile acidity vs Quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='volatile acidity',data=df)

# citric acid vs Quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='citric acid',data=df)

"""4. Correlation
 
 1. Positive Correlation
 2. Negative Correlation
"""

correlation=df.corr()

# constructing a heatmap to understand the correlation between the columns

plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Greens')

#seperate the data and Label
X=df.drop('quality',axis=1)

X

"""5.1 Label Binarizaton"""

Y=df['quality'].apply(lambda y_value: 1 if y_value >=7 else 0)

Y

"""6.Train & Test Split"""

X_train, X_test, Y_train , Y_test=train_test_split(X,Y,test_size=0.2,random_state=3)

X_train.shape

X_test.shape

Y_train.shape

Y_test.shape

Y.shape

"""7.Model Training:

Random Forest Classifier
"""

model=RandomForestClassifier()

model.fit(X_train,Y_train)

"""8.Model Evaluation

Accuracy Score
"""

# accuracy on test data
X_test_pred=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_pred,Y_test)

print('Model Accuracy: ',test_data_accuracy)

"""9.Building a Predictive System"""

df.sample(5)

"""Positive Result Checking"""

# Positive Result

input_data=(7.5,0.520,0.16,1.9,0.085,12.0,35.0,0.99680,3.38,0.62,9.5)

#changing the input data to a numpy array

input_data_as_np=np.asarray(input_data)

#reshape the data 

input_data_reshaped=input_data_as_np.reshape(1,-1)

prediction=model.predict(input_data_reshaped)

print(prediction)

if(prediction[0]==1):
    print('Good Quality Wine')
else:
    print('Bad Quality Wine')

"""Negative Result Checking"""

# Negative Result

input_data=(7.3,0.305,0.39,1.2,0.059,7.0,11.0,0.99331,3.29,0.52,11.5)

#changing the input data to a numpy array

input_data_as_np=np.asarray(input_data)

#reshape the data 

input_data_reshaped=input_data_as_np.reshape(1,-1)

prediction=model.predict(input_data_reshaped)

print(prediction)

if(prediction[0]==1):
    print('Good Quality Wine')
else:
    print('Bad Quality Wine')

"""Thank You

"""